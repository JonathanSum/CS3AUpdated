/********************************************* *   Author         : Jonathan Sum *   Assignment   #1: Lab 02 - CS 002 Review - Arrays *   SECTION        : CS 003A *   Due Date       : 2/23/19 *   ________________________________________________ *   The program should also be able to convert a Roman numeral such as MCMLXXVIII *   to its decimal number representation. *   Include a menu to select from the two options. *   Second, it can also convert digital number to roma number. *   ________________________________________________ *   Input: *     input 1: input a seed value *     input 2: input total number of experiments. *   OUTPUT: *      output 1: a curve of how 21 different sum occurs***********************************************/#include <iostream>#include <cstdlib>#include <string>using namespace std;int roll();string covertNumberToX(int sum);int returningSumOf4Dices();void printHistogram(int counts[], int numberOfExperiments);int main() {    //Step 1, Ask the user to input a seed value    int seedValue;          //INPUT -- seed value .    //  output the class heading to the screen    cout<< "******************************************************************\n";    cout<< "    Programmed by   : Jonathan Sum\n";    cout<< "    Student ID      : 10239468\n";    cout<< "    CS3A            : MTWTH -6a-8:25\n";    cout<< "    Lab #1          : Roman Numerals\n";    cout<< "******************************************************************\n";    // INPUT -- ask the user for an seed value.    cout << "Enter the seed value" << endl;    cin >> seedValue;    srand(seedValue);    //PROCESSING -- First we set up an array with 21 elements and initial it.    //This array tracks of how often each possible sum (from 4 to 24) occurred.    //Its 0 index represents the sum of 4, and its 21 index represents the sum of 21.    int recordOfPossible21Result[21];       //CALC -- This is an array for keep track the sum of 4 dice.    for (int i = 0; i < 21; i++) {        recordOfPossible21Result[i] = 0;    }    int numberOfExperiments;       //INPUT -- the number of experiment    //INPUT -- Step 2, Ask the user to input number of the experiments    cout << "Enter the number of Rolls:" << endl;    cin >> numberOfExperiments;    //Step 4, build a for loop, and it runs "number of the experiments" times.    // In addition, we tracks the sum of 4 dices.    // If the sum is 4, recordOfPossible21Result[0] adds one.    // If the sum is 24, recordOfPossible21Result[21] adds one.    //Line break    cout << endl;    //PROCESSING -- run numbers of experiments    for (int i = 0; i < numberOfExperiments; i++) {        //Step 4.1, function returningSumOf4Dice outputs a sum from rolling 4 dices.        int sum = returningSumOf4Dices();        cout << "";        // If the sum is 4, recordOfPossible21Result[0] adds one.        if (sum == 4) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 5) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 6) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 7) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 8) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 9) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 10) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 11) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 12) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 13) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 14) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 15) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 16) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 17) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 18) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 19) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 20) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 21) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 22) {            recordOfPossible21Result[sum] += 1;        } else if (sum == 23) {            recordOfPossible21Result[sum] += 1;            // If the sum is 24, recordOfPossible21Result[21] adds one.        } else if (sum == 24) {        }    }    //After tracking "number of the experiments" times, we uses printHistogram function to print a    //curve. Each line of curve outputs n terms of X, and each terms of X is the integer of each element of an array.    printHistogram(recordOfPossible21Result, numberOfExperiments);    return 0;}// roll()//return a random number from one to 6int roll() {    int roll;    roll = rand() % (6) + 1;    return roll;}//CovertNumberToX(int sum)//this function will output many terms of X, and the terms of X it outputs is the number of input.string covertNumberToX(int sum          //  IN -assignment input the sum of 4 dices) {    string result;    for (int i = 0; i < sum; i++) {        result += "X";    }    return result;}//ReturningSumOf4Dices():// this function will sum up the total 4 dicesint returningSumOf4Dices() {    int sumOf4Dice;    //Roll 4 times by this loop,    //and each times we add the roll into the variable "sumOf4Dice".    for (int i = 0; i < 4; i++) {        sumOf4Dice += roll();    }    return sumOf4Dice;}//void printHistogram(int counts[])://It takes an array of integers (assumed to be of size 21 elements),//then prints out sequential labelled lines from 4 to 24 with as many `X` symbols//on that line as is indicated in the appropriate element of the array.void printHistogram(int counts[],            //IN -- assignment the array of tracking how possible often of sum                    int numberOfExperiments) {    //CALC the how often the possible and convert possible amounts to X    for(int i=0; i<21; i++){        float numX =((float)counts[i]/numberOfExperiments)*100;        //Print out amounts of X        cout<<to_string(i)+":"+covertNumberToX(numX)<<endl;    }}